{
  "hash": "c10a8bddb84814cc46851b652d6ee90f",
  "result": {
    "markdown": "---\ntitle: \"Blog Post 3\"\nauthor: \"Mathias Heinz\"\ndate: \"2024-02-19\"\ncategories: [code, analysis]\n\n---\n\nThe data sat I choose to work with for this data set came from the Tidy Tuesday data, and contained information about NFL teams. I wanted to try and create a model for predicting wins using other variables from the data set. Some variables I worked with include, points for, points against, playoffs, offensive and defensive ranking, and lastly strength of schedule.\nI retrieved my data from: https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-02-04/readme.md\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(broom)\nlibrary(modelr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'modelr'\n\nThe following object is masked from 'package:broom':\n\n    bootstrap\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstandings <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-04/standings.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 638 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): team, team_name, playoffs, sb_winner\ndbl (11): year, wins, loss, points_for, points_against, points_differential,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nNFL2019 <- standings |> filter(year == 2019)\n\nnfl_mod <- lm(wins ~ points_against + strength_of_schedule + playoffs,\n              data = NFL2019)\n\ngrid_nfl <- NFL2019 |> data_grid(\n  points_against = seq_range(points_against, n = 6),\n  strength_of_schedule = seq_range(strength_of_schedule, n = 6),\n  playoffs = c(\"Playoffs\", \"No Playoffs\")\n)\naug_nfl <- augment(nfl_mod, newdata = grid_nfl,\n                   interval = \"confidence\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnfl_mod\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nlm(formula = wins ~ points_against + strength_of_schedule + playoffs, \n    data = NFL2019)\n\nCoefficients:\n         (Intercept)        points_against  strength_of_schedule  \n            13.89808              -0.02039               0.43397  \n    playoffsPlayoffs  \n             4.03895  \n```\n:::\n:::\n\nThe fitted equations looks like \npredicted wins = 13.898 - .0204*PA + .434*SOS + 4.039*(1 if Yes made playoffs)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = NFL2019, aes(x = points_against, y = wins)) +\n  geom_point()+\n  geom_line(data = aug_nfl, aes(x = points_against, y = .fitted,\n                                color = as.factor(strength_of_schedule))) +\n  facet_wrap(~ playoffs)+\n  scale_fill_viridis_d()+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nThis graph was the only one which I was able to display the data in the way that I wanted. Here we are looking at the graph for predicted wins during the 2019 NFL season. The predictors I used for this model were points against, playoffs, and strength of schedule. I faceted the graph based on wether a team mae the playoffs that year or not, and each line represents a different strength of schedule.\n\n::: {.cell}\n\n```{.r .cell-code}\nnfl_2_mod <- lm(wins ~ points_for + defensive_ranking + playoffs,\n              data = NFL2019)\n\ngrid_nfl_2 <- NFL2019 |> data_grid(\n  points_for = seq_range(points_for, n = 6),\n  defensive_ranking = seq_range(defensive_ranking, n = 6),\n  playoffs = c(\"Playoffs\", \"No Playoffs\")\n)\naug_nfl_2 <- augment(nfl_2_mod, newdata = grid_nfl_2,\n                   interval = \"confidence\")\n\nggplot(data = NFL2019, aes(x = points_for, y = wins)) +\n  geom_point()+\n  geom_line(data = aug_nfl_2, aes(x = points_for, y = .fitted)) +\n  facet_wrap(~playoffs)+\n  scale_fill_viridis_d()+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsteelers <- standings |> filter(team == \"Pittsburgh\")\nfull_mod <- lm(wins ~ year + offensive_ranking + defensive_ranking,\n               data = steelers)\n\nfull_grid <- steelers |> data_grid(\n  year = c(2000:2019),\n  offensive_ranking = seq_range(offensive_ranking, n = 6),\n  defensive_ranking = seq_range(defensive_ranking, n = 6)\n)\n\nfull_aug <- augment(full_mod, newdata = full_grid,\n                    interval = \"confidence\")\n\nggplot(data = steelers, aes(x = year, y = wins))+\n  geom_point()+\n  geom_line(data = full_aug, aes(x = year, y = .fitted), alpha = .4)+\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nThe previous two graphs did not turn out how I had hoped, but I spent a lot of time trying to get the code to work so wanted to keep them in as proof of my work. In the top graph I was trying to look at all years in the data set to make my predictions. The second graph I was trying to predict the wins for my favorite team the Steelers, but that did not work out either.\n\n\nConclusions:\n\nIf I had more tie with this data set I am sure I could have got my other two models and graphs to run. Further, I would like to look further into the simple_rating variable which seemed interesting, and I want to try and see if I can predict Superbowl winner using predictors from the data set.\n\nConnections to Class:\n\nThe process I followed to create my models was directly related to the path we learned in class. First fitting the model with lm(), then constructing a grid, using augment to get the predictions, and finally plotting the predictions. I wish I had been able to create some more different plots with this data.\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}