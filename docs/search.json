[
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/BlogPost1/index.html",
    "href": "posts/BlogPost1/index.html",
    "title": "Blog Post 1",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nrichmondway &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-09-26/richmondway.csv')\n\nRows: 34 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): Character, Season_Episode, Dating_flag, Coaching_flag\ndbl (12): Episode_order, Season, Episode, F_count_RK, F_count_total, cum_rk_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nFor my first blog post I found a data set on the popular TV series Ted Lasso. One of the most popular characters in the show is Roy Kent, who is known for his colorful vocabulary. This data set contains multiple variables about Kent’s use of the “F bomb”. For my project I used the season and episode variables as well as the total “F_cout” for each episode. I also used the variable Imdb_rating which shows the Imdb rating given to each episode. I was interested in both how Kent’s “F_count” changed over the seasons, and how the amout of “F_count” impacted the Imdb rating of each episode. I located my data through the following link. https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-09-26/readme.md\n\nggplot(richmondway, aes(x = Episode, y = F_count_RK))+\n  geom_point(color = \"blue\")+\n  geom_segment(aes(xend = Episode, y = 0, yend = F_count_RK))+\n  facet_wrap(~Season)+\n  coord_flip()+\n  theme(panel.grid.major.x = element_blank())+\n  theme_minimal()+\n  labs(title = \"Graph of Roy Kent's F_count Across All Season\", x = \"Number of F words\", y = \"Episode Number\")\n\n\n\n\nFrom this vizulizatoin we can see how Roy Kent’s “F-count” changes throughout the seasons. We can see as the seasons continue Kent says more and more “F bombs”. The third season appears to have highest overall “F_count”, but two episodes in season two have the highest “F_count” for an episode with a little over 20.\n\nclass(richmondway$Season)\n\n[1] \"numeric\"\n\nrichmondway &lt;- richmondway |&gt; mutate(Season_factor = as.factor(Season))\n\nggplot(richmondway, aes(x = F_count_RK, y = Imdb_rating))+\n  geom_point(aes(color = Season_factor)) +\n  theme_minimal()+\n  labs(title = \"IMDB Rating vs F_count for Roy Kent\", x = \"F Bombs Said by Roy Kent\", y = \"Imdb Rating\")\n\n\n\n\nIn this graph we can see the relationship between an episodes Imdb rating and Roy Kent’s “F_count”. Each dot represents an episode, adn they are colored by which season the episode occured in. There does not appear to be much of a clear correlation between “F_count” and IMDB rating, however I do want to note that the two episdoes from season 2 with over 20 “F_count” both scored above a 8.75 on IMDB.\nConclusions:\nIf I had more time with this data I would like to look more into two indicator variables in the data set. These variables denote whether or not Kent was in a relationship as the time of the episode, and if he was coaching the team at the time of them episode. I think it would be interesting to see how these indicator variables effect the “F_count” across the seasons.\nWrap Up:\nBoth of the graphs I created are free of visual clutter, and have color schemes that are easy on the eye and readable. My lollipop graph is faceted to better show the difference between seasons, as having all the seasons in one graph would get messy. For my second graph I was able to color by season as the points to not overlap and are not too close together."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/BlogPost3/index.html",
    "href": "posts/BlogPost3/index.html",
    "title": "Blog Post 3",
    "section": "",
    "text": "The data sat I choose to work with for this data set came from the Tidy Tuesday data, and contained information about NFL teams. I wanted to try and create a model for predicting wins using other variables from the data set. Some variables I worked with include, points for, points against, playoffs, offensive and defensive ranking, and lastly strength of schedule. I retrieved my data from: https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-02-04/readme.md\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(broom)\nlibrary(modelr)\n\n\nAttaching package: 'modelr'\n\nThe following object is masked from 'package:broom':\n\n    bootstrap\n\n\n\nstandings &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-04/standings.csv')\n\nRows: 638 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): team, team_name, playoffs, sb_winner\ndbl (11): year, wins, loss, points_for, points_against, points_differential,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nNFL2019 &lt;- standings |&gt; filter(year == 2019)\n\nnfl_mod &lt;- lm(wins ~ points_against + strength_of_schedule + playoffs,\n              data = NFL2019)\n\ngrid_nfl &lt;- NFL2019 |&gt; data_grid(\n  points_against = seq_range(points_against, n = 6),\n  strength_of_schedule = seq_range(strength_of_schedule, n = 6),\n  playoffs = c(\"Playoffs\", \"No Playoffs\")\n)\naug_nfl &lt;- augment(nfl_mod, newdata = grid_nfl,\n                   interval = \"confidence\")\n\n\nnfl_mod\n\n\nCall:\nlm(formula = wins ~ points_against + strength_of_schedule + playoffs, \n    data = NFL2019)\n\nCoefficients:\n         (Intercept)        points_against  strength_of_schedule  \n            13.89808              -0.02039               0.43397  \n    playoffsPlayoffs  \n             4.03895  \n\n\nThe fitted equations looks like predicted wins = 13.898 - .0204PA + .434SOS + 4.039*(1 if Yes made playoffs)\n\nggplot(data = NFL2019, aes(x = points_against, y = wins)) +\n  geom_point()+\n  geom_line(data = aug_nfl, aes(x = points_against, y = .fitted,\n                                color = as.factor(strength_of_schedule))) +\n  facet_wrap(~ playoffs)+\n  scale_fill_viridis_d()+\n  theme_minimal()\n\n\n\n\nThis graph was the only one which I was able to display the data in the way that I wanted. Here we are looking at the graph for predicted wins during the 2019 NFL season. The predictors I used for this model were points against, playoffs, and strength of schedule. I faceted the graph based on wether a team mae the playoffs that year or not, and each line represents a different strength of schedule.\n\nnfl_2_mod &lt;- lm(wins ~ points_for + defensive_ranking + playoffs,\n              data = NFL2019)\n\ngrid_nfl_2 &lt;- NFL2019 |&gt; data_grid(\n  points_for = seq_range(points_for, n = 6),\n  defensive_ranking = seq_range(defensive_ranking, n = 6),\n  playoffs = c(\"Playoffs\", \"No Playoffs\")\n)\naug_nfl_2 &lt;- augment(nfl_2_mod, newdata = grid_nfl_2,\n                   interval = \"confidence\")\n\nggplot(data = NFL2019, aes(x = points_for, y = wins)) +\n  geom_point()+\n  geom_line(data = aug_nfl_2, aes(x = points_for, y = .fitted)) +\n  facet_wrap(~playoffs)+\n  scale_fill_viridis_d()+\n  theme_minimal()\n\n\n\n\n\nsteelers &lt;- standings |&gt; filter(team == \"Pittsburgh\")\nfull_mod &lt;- lm(wins ~ year + offensive_ranking + defensive_ranking,\n               data = steelers)\n\nfull_grid &lt;- steelers |&gt; data_grid(\n  year = c(2000:2019),\n  offensive_ranking = seq_range(offensive_ranking, n = 6),\n  defensive_ranking = seq_range(defensive_ranking, n = 6)\n)\n\nfull_aug &lt;- augment(full_mod, newdata = full_grid,\n                    interval = \"confidence\")\n\nggplot(data = steelers, aes(x = year, y = wins))+\n  geom_point()+\n  geom_line(data = full_aug, aes(x = year, y = .fitted), alpha = .4)+\n  theme_minimal()\n\n\n\n\nThe previous two graphs did not turn out how I had hoped, but I spent a lot of time trying to get the code to work so wanted to keep them in as proof of my work. In the top graph I was trying to look at all years in the data set to make my predictions. The second graph I was trying to predict the wins for my favorite team the Steelers, but that did not work out either.\nConclusions:\nIf I had more tie with this data set I am sure I could have got my other two models and graphs to run. Further, I would like to look further into the simple_rating variable which seemed interesting, and I want to try and see if I can predict Superbowl winner using predictors from the data set.\nConnections to Class:\nThe process I followed to create my models was directly related to the path we learned in class. First fitting the model with lm(), then constructing a grid, using augment to get the predictions, and finally plotting the predictions. I wish I had been able to create some more different plots with this data."
  },
  {
    "objectID": "posts/test_post/index.html",
    "href": "posts/test_post/index.html",
    "title": "Post Test",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(palmerpenguins)\nggplot(data = penguins, aes(x = bill_length_mm))+\n  geom_histogram(color = \"black\", fill = \"white\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`)."
  },
  {
    "objectID": "posts/BlogPost2/index.html",
    "href": "posts/BlogPost2/index.html",
    "title": "Blog Post 2",
    "section": "",
    "text": "I knew I wanted to create a map for my second blog post, so I looked for a data set that would make this possible. The data set I found contains life expectancy data for countries around the world throughout time. This was a rather simple data set with only four variables, entity (country), code (abbreviation for country), year, and life expectancy. The main question I wanted to explore was how does life expectancy look across the world.I was also interested in how life expectancy has changed over time. I retrieved my data from the following github link; https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-12-05/readme.md\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlife_expectancy &lt;- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-12-05/life_expectancy.csv')\n\nRows: 20755 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Entity, Code\ndbl (2): Year, LifeExpectancy\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nlife_expectancy_2020 &lt;- life_expectancy |&gt; filter(!is.na(Code)) |&gt; \n  filter(Year == 2020) |&gt; mutate(Entity = fct_recode(Entity,\n                                      \"USA\" = \"United States\"))\nworld_df &lt;- map_data(\"world\")\nworld_full&lt;- left_join(world_df, life_expectancy_2020,\n                       by = c(\"region\" = \"Entity\"))\nggplot(data = world_full, aes(x = long, y = lat, group = group))+\n  geom_polygon(aes(fill = LifeExpectancy))+\n  coord_map(projection = \"mercator\", xlim = c(-180,180))+\n  scale_fill_viridis_c(direction = -1, option = \"D\")\n\n\n\n\nThis map shows the the whole globe using the Mercator projection style. Each country is colored based on their life expectancy is the year 2020. From this we can see that countries like Australia and Canada have high life expectancy, in the 80’s. While some countries in central Africa have lower life expectancy, down in the mid to low 60’s.\n\nlife_expectancy_NA &lt;- life_expectancy |&gt; filter(Entity == \"United States\" | Entity == \"Mexico\" | Entity == \"Canada\") \n\nggplot(life_expectancy_NA, aes(x = Year, y = LifeExpectancy))+\n  geom_point(aes(color = Entity))+\n  labs(title = \"Life Expectancy of North American Countries\", \n       x = \"Year\", y = \"Life Expectancy (Years)\")\n\n\n\n\nI wanted to dive a bit deeper into the life expectancy of specific regions so decided to create a graph of the three biggest countries in North America. This shows how Canada and the US have have similar life expectancy throughout the range of the data set. The gap between Mexico and the other two countries has been shrinking since the 1950’s, and today all three countries have rather high life expectancy.\n\nlife_expectancy_5 &lt;- life_expectancy |&gt; filter(Entity == \"United States\" | Entity == \"Japan\" | Entity == \"Germany\" | Entity == \"China\" | Entity == \"India\") \nggplot(life_expectancy_5, aes(x = Year, y = LifeExpectancy))+\n  geom_point(aes(color = Entity))+\n  labs(title = \"Life Expectancy for Top 5 GDP Countries\",\n       x = \"Year\", y = \"Life Expectancy\")\n\n\n\n\nThis graph is similar to the previous one however for this visualization I chose to look at the five largest countries based on GPD. One notable country in this graph is Japan, who started around the middle of the pack, but now have the highest life expectancy of these countries. Germany and the USA have similar trends throughout history, resulting in a life expectancy of around 80 today. India has the lowest life expectancy of these five countries, hovering in the 20’s around 1900 and up to around 70 today. China used to have one of the lower life expectancy’s, but has caught up to the rest of the pack today.\nConclusion and Wrap Up:\nThis data set was enjoyable to work with and create visualizations. However one issue I noticed was in the map I created. Some of the countries appeared grey or not filled in. I believe this root of this issue to be a difference in the labeling of each country between the two data sets I used. I was able to quickly fix the issue for the United States. However, if I had more time to comb through all the countries in the data set, I would like to fix all the names to the whole map is filled in.\nConnection:\nFor my map I created the map similar to ones we made in class, using the whole world map rather than just the USA or one state. For the color scheme on my mad I chose to use a sequential color scheme to show the better show the range of life expectancy values across the globe. My two graphs clearly show the trends for each country, using a different color for each one, and the overall grpahs themselves are neat and not cluttered.\nNote:\nTop 5 GDP retrieved from https://www.forbesindia.com/article/explainers/top-10-largest-economies-in-the-world/86159/1#:~:text=Which%20are%20the%20top%205,hold%20those%20positions%20in%202024.&text=%236%20United%20Kingdom%20(U.K.)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ds334blog",
    "section": "",
    "text": "Blog Post 3\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nFeb 19, 2024\n\n\nMathias Heinz\n\n\n\n\n\n\n  \n\n\n\n\nBlog Post 2\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nFeb 19, 2024\n\n\nMathias Heinz\n\n\n\n\n\n\n  \n\n\n\n\nBlog Post 1\n\n\n\n\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nFeb 9, 2024\n\n\nMathias Heinz\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nJan 31, 2024\n\n\nMathias Heinz\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nJan 31, 2024\n\n\nMathias Heinz\n\n\n\n\n\n\n  \n\n\n\n\nPost Test\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nJan 31, 2024\n\n\nMathias Heinz\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]